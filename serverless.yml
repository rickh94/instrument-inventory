service: instrument-inventory

plugins:
  - serverless-python-requirements
  - serverless-offline

custom:
  pythonRequirements:
    dockerizePip: false
  stage: ${opt:stage, self:provider.stage}
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}
  todosTableName: ${self:custom.stage}-instrument-inventory-todos
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-east-1
  environment:
    TABLE_NAME: ${self:custom.environment.table_name}
    AIRTABLE_BASE_KEY: ${self:custom.environment.base_key}
    AIRTABLE_API_KEY: ${self:custom.environment.api_key}
    TODOS_TABLE_NAME: ${self:custom.todosTableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [TodosTable, Arn]

functions:
  retrieve-single:
    handler: retrieve.single
    events:
      - http:
          path: retrieve-single
          method: post
          cors: true
          authorizer: aws_iam

  retrieve-multiple:
    handler: retrieve.multiple
    events:
      - http:
          path: retrieve-multiple
          method: post
          cors: true
          authorizer: aws_iam

  sign-out:
    handler: sign_out.main
    events:
      - http:
          path: sign-out
          method: post
          cors: true
          authorizer: aws_iam

  create:
    handler: create.main
    events:
      - http:
          path: create
          method: post
          cors: true
          authorizer: aws_iam

  search-number:
    handler: search.number
    events:
      - http:
          path: search/number
          method: post
          cors: true
          authorizer: aws_iam

  search-assigned:
    handler: search.assigned
    events:
      - http:
         path: search/assigned
         method: post
         cors: true
         authorizer: aws_iam

  get:
    handler: get.main
    events:
      - http:
          path: get/{id}
          method: get
          cors: true
          authorizer: aws_iam

  filter:
    handler: filter.main
    events:
      - http:
          path: filter
          method: post
          cors: true
          authorizer: aws_iam

  update-photo:
    handler: update.photo
    events:
      - http:
          path: update/photo/{id}
          method: patch
          cors: true
          authorizer: aws_iam

  update-full:
    handler: update.full
    events:
      - http:
          path: update/{id}
          method: patch
          cors: true
          authorizer: aws_iam
      - http:
          path: update/{id}
          method: put
          cors: true
          authorizer: aws_iam

  todos-create:
    handler: todos.create
    events:
      - http:
          path: todos
          method: post
          cors: true
          authorizer: aws_iam

  todos-read-single:
    handler: todos.read_single
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true
          authorizer: aws_iam

  todos-read-active:
    handler: todos.read_active
    events:
      - http:
          path: todos/active
          method: get
          cors: true
          authorizer: aws_iam

  todos-read-completed:
    handler: todos.read_completed
    events:
      - http:
          path: todos/completed
          method: get
          cors: true
          authorizer: aws_iam

  todos-mark-completed:
    handler: todos.mark_completed
    events:
      - http:
          path: todos/{id}/mark-completed
          method: post
          cors: true
          authorizer: aws_iam

  todos-unmark-completed:
    handler: todos.unmark_completed
    events:
      - http:
          path: todos/{id}/unmark-completed
          method: post
          cors: true
          authorizer: aws_iam

  todos-update:
    handler: todos.update
    events:
      - http:
        path: todos/{id}
        method: patch
        cors: true
        authorizer: aws_iam

  todos-delete:
    handler: todos.delete
    events:
      - http:
        path: todos/{id}
        method: delete
        cors: true
        authorizer: aws_iam

resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  - ${file(resources/s3-bucket.yml)}
  - ${file(resources/dynamodb-table.yml)}
