service: instrument-inventory

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    useStaticCache: false
    dockerizePip: true
    usePipenv: true
    slim: true
    slimPatterns:
      - "**/examples*"
      - "bin/*"
      - "**/pydantic/*.py"
      - "**/*.egg-info*"
      - "**/*.pyi"
  stage: ${opt:stage, self:provider.stage}
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}
  tableNames:
    todos: ${self:custom.stage}-instrument-inventory-todos
    instruments: ${self:custom.stage}-instrument-inventory-instruments
  photosPermanentBucketName: ${self:custom.stage}-instrument-inventory-permanent-photos
  tableThroughputs:
    prod: 5
    default: 3
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  nothing: "nothing"

package:
  exclude:
    - ./**
  include:
    - app/**

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-east-1
  environment:
    TABLE_NAME: ${self:custom.environment.table_name, self:custom.nothing}
    AIRTABLE_BASE_KEY: ${self:custom.environment.base_key, self:custom.nothing}
    AIRTABLE_API_KEY: ${self:custom.environment.api_key, self:custom.nothing}
    TODOS_TABLE_NAME: ${self:custom.tableNames.todos}
    PHOTOS_BUCKET_NAME: ${self:custom.photosPermanentBucketName}
    INSTRUMENTS_TABLE_NAME: ${self:custom.tableNames.instruments}
    VERSION: '19.7a1'

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:PutItem
      Resource:
        - "Fn::GetAtt": [TodosTable, Arn]
        - "Fn::GetAtt": [InstrumentsTable, Arn]
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - Fn::GetAtt: [PhotosPermanentBucket, Arn]
        - Fn::Join:
          - ''
          -
            - Fn::GetAtt: [PhotosPermanentBucket, Arn]
            - '/*'

functions:
  create:
    handler: app.create.main
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: instruments
          method: post
          cors: true
          authorizer: aws_iam

  get:
    handler: app.get.main
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: instruments/{id}
          method: get
          cors: true
          authorizer: aws_iam

  get-all:
    handler: app.get.all_
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: instruments/all
          method: get
          cors: true
          authorizer: aws_iam

  update-photo:
    handler: app.update.photo
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: instruments/{id}/photo
          method: patch
          cors: true
          authorizer: aws_iam

  update-full:
    handler: app.update.full
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: instruments/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    handler: app.delete.main
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: instruments/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  retrieve-single:
    handler: app.retrieve.single
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: retrieve-single
          method: post
          cors: true
          authorizer: aws_iam

  retrieve-multiple:
    handler: app.retrieve.multiple
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: retrieve-multiple
          method: post
          cors: true
          authorizer: aws_iam

  sign-out:
    handler: app.sign_out.main
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: sign-out
          method: post
          cors: true
          authorizer: aws_iam

  search-number:
    handler: app.search.number
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: search/number
          method: post
          cors: true
          authorizer: aws_iam

  search-assigned:
    handler: app.search.assigned
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
         path: search/assigned
         method: post
         cors: true
         authorizer: aws_iam

  search-history:
    handler: app.search.history
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: search/history
          method: post
          cors: true
          authorizer: aws_iam

  search-assigned-history:
    handler: app.search.history_and_assigned
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: search/assigned-history
          method: post
          cors: true
          authorizer: aws_iam

  filter:
    handler: app.filter.main
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: filter
          method: post
          cors: true
          authorizer: aws_iam

  filter-signed-out:
    handler: app.filter.signed_out
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: filter/signed-out
          method: get
          cors: true
          authorizer: aws_iam

  filter-gifted:
    handler: app.filter.gifted
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: filter/gifted
          method: get
          cors: true
          authorizer: aws_iam

  todos-create:
    handler: app.todos.create
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: todos
          method: post
          cors: true
          authorizer: aws_iam

  todos-read-single:
    handler: app.todos.read_single
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true
          authorizer: aws_iam

  todos-read-active:
    handler: app.todos.read_active
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: todos/active
          method: get
          cors: true
          authorizer: aws_iam

  todos-read-completed:
    handler: app.todos.read_completed
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: todos/completed
          method: get
          cors: true
          authorizer: aws_iam

  todos-mark-completed:
    handler: app.todos.mark_completed
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: todos/{id}/mark-completed
          method: post
          cors: true
          authorizer: aws_iam

  todos-unmark-completed:
    handler: app.todos.unmark_completed
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: todos/{id}/unmark-completed
          method: post
          cors: true
          authorizer: aws_iam

  todos-update:
    handler: app.todos.update
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: todos/{id}
          method: patch
          cors: true
          authorizer: aws_iam
      - http:
          path: todos/{id}
          method: put
          cors: true
          authorizer: aws_iam

  todos-delete:
    handler: app.todos.delete
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  schema:
    handler: app.schema.main
    tags:
      CostCenter: 'Instrument Inventory'
    events:
      - http:
          path: schema
          method: get
          cors: true

resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  - ${file(resources/s3-bucket.yml)}
  - ${file(resources/dynamodb-table.yml)}
